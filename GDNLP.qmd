---
title: "NLPGD"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
library(tidyverse)
library(ggplot2)
library(tidyquant)
library(plotly)
library(data.table)
library(lubridate)
library(zoo)
library(tidytext)
library(textdata)
library(fintool)
#connors data load
bp <- read_csv("BP.csv") %>% 
  mutate(i = row_number())
chevron <- read_csv("chevron.csv") %>% 
  mutate(i = row_number())
exxon <- read_csv("exxonmobil.csv") %>% 
  mutate(i = row_number())
shell <- read_csv("Shell.csv") %>% 
  mutate(i = row_number())


# my os seems to import them as ...1, hence comment out
bp <- bp %>% 
  #select(-X)
  select(-`...1`)
shell <- shell %>%
  #select(-X)
  select(-`...1`)

# prep dataframe
ratings <- rbind(bp, shell, exxon, chevron)
ratings <- ratings %>%
  mutate('Company' = name1, 
         'reviewtext' = reviewBody,
         'Rating' = ratingValue,
         #lubridate method was giving a parsing error for 3, this way seems quiter
          date = as.Date(date, format = "%b %d, %Y")) %>%
          transmute(Company, name, Rating, reviewtext, date)
```

```{r}
# start playing around with sentiment
# afinn
afinn <- tidytext::get_sentiments('afinn')

afinn_nlp <- ratings %>%
  select(date, Company, reviewtext) %>%
  filter(date > "2016-01-01") %>% 
  unnest_tokens(output = word, input = reviewtext) %>% 
  inner_join(afinn) %>%
  mutate(month = (ceiling_date(date, unit = 'month') - days(1))) %>% 
  group_by(month, Company) %>%
  summarise(sentiment = mean(value), .groups = 'keep') 

afinn_nlp %>% 
  ggplot(aes(x = month, y = sentiment, col = Company)) + geom_bar(stat = 'identity') + facet_wrap(~Company)


affin_base <- ratings %>%
  select(date, Company, reviewtext) %>% 
  unnest_tokens(output = word, input = reviewtext) %>% 
  inner_join(afinn) %>% 
  mutate(y = year(date),
         q = paste0("Q", quarter(date)," ", y),
         m = paste0("M", month(date)," ", y)) %>% 
  rename(company = Company)
```

```{r}
# create sentiment analysis for 3 month rolling average
bing <- tidytext::get_sentiments('bing')

bing_nlp <- ratings %>%
  select(date, Company, reviewtext) %>%
  filter(date > "2016-01-01") %>%
  unnest_tokens(output = word, input = reviewtext) %>% 
  anti_join(stop_words) %>% 
  inner_join(bing) %>%
  mutate(month = (ceiling_date(date, unit = 'month') - days(1))) %>%
  group_by(month, Company, sentiment) %>%
  summarise(count = n(), .groups = 'keep') %>% 
  pivot_wider(names_from = sentiment, values_from = count, values_fill = list(count = 0)) %>% 
  mutate(total = positive + negative) %>% 
  mutate(percent_positive = (positive / total) * 100)
  #ggplot(aes(x = month, y = percent_positive, fill = Company)) +
  #geom_bar(stat = 'identity', position = 'stack') +
  #facet_wrap(~Company) + labs(y = 'Percentage Positive', x = '')\


bing_base <- ratings %>%
  select(date, Company, reviewtext) %>%
  unnest_tokens(output = word, input = reviewtext) %>% 
  anti_join(stop_words) %>% 
  inner_join(bing) %>% 
  mutate(y = year(date),
         q = paste0("Q", quarter(date)," ", y),
         m = paste0("M", month(date)," ", y)) %>% 
  rename(company = Company)


```

```{r}
# now try and get a 3 month rolling average, attach 3 month rolling rating, use those two variables to predict 3 month rolling returns. 

# Returns Data
tick <- c('SHEL', 'XOM', 'BP', 'CVX')

prices <- tidyquant::tq_get(tick,
                            get = 'stock.prices',
                            from = '2013-12-31',
                            to = Sys.Date())
ret <- prices %>%
  group_by(symbol) %>%
  mutate(returns = log(adjusted/lag(adjusted))) %>% 
  transmute(date, symbol, returns)

tick <- c('^GSPC')

index <- tidyquant::tq_get(tick,
                           get = 'stock.prices',
                           from = '2013-12-31',
                           to = Sys.Date())

rf <- tidyquant::tq_get("DGS10",
                           get = "economic.data",
                           from = '2013-12-31',
                           to = Sys.Date()) %>% 
  transmute(date, rf = price/100) %>% 
  mutate(rf = ((rf + 1)^(1/252)) - 1) %>% 
  filter()


ret_index <- index %>%
  group_by(symbol) %>%
  mutate(returns = log(adjusted/lag(adjusted))) %>% 
  ungroup() %>% 
  transmute(date, sp500_close = adjusted, sp500_ret = returns)

ret_index <- full_join(rf, ret_index, by = 'date') %>%
  fill(rf, .direction = "down")
  
ret_join <- full_join(ret, ret_index, by = 'date') %>% 
  drop_na()

shell_ret <- ret_join %>% 
  filter(symbol == "SHEL")

exon_ret <- ret_join %>% 
  filter(symbol == "XOM")
  
bp_ret <- ret_join %>% 
  filter(symbol == "BP")

chev_ret <- ret_join %>% 
  filter(symbol == "CVX")

chev_ret <- rollReg(chev_ret, 252, 'sp500_ret', 'returns')

bp_ret <- rollReg(bp_ret, 252, 'sp500_ret', 'returns')

exon_ret <- rollReg(exon_ret, 252, 'sp500_ret', 'returns')

shell_ret <- rollReg(shell_ret, 252, 'sp500_ret', 'returns')

# alpha = Rasset - rf - beta*Rmarket + Beta*rf

ret_join_beta <- rbind(chev_ret, bp_ret, exon_ret, shell_ret)

ret_join_beta <- ret_join_beta %>% 
  mutate(alpha = returns - rf - slope*sp500_ret + slope*rf) %>% 
  drop_na() %>%
  mutate(y = year(date),
         q = paste0("Q", quarter(date)," ", y),
         m = paste0("M", month(date)," ", y))



```

```{r}

library(tidyverse)
library(zoo)
library(lubridate)

rateRollAvg <- rbind(bp, chevron, exxon, shell) %>% 
  transmute(ratingValue, name, reviewBody, company = name1, date, i) %>%
  mutate(date = as.Date(date, format = "%b %d, %Y")) %>%
  drop_na() %>% 
  arrange(company, date) %>%
  mutate(month = (ceiling_date(date, unit = 'month') - days(1))) %>% 
  group_by(company, month) %>%
  summarise(meanRateMon = mean(ratingValue)) %>% 
  group_by(company) %>%
  mutate(rollAvg3 = rollmean(meanRateMon, 3, fill = NA, align="right")) %>%
  mutate(rollAvg12 = rollmean(meanRateMon, 12, fill = NA, align="right")) %>% 
  drop_na() %>% 
  filter(month > "2015-12-31") %>% 
  mutate(xOver = case_when(rollAvg3 > rollAvg12 ~ 1,
                           rollAvg3 <= rollAvg12 ~ 0)) %>% 
  ungroup() %>% 
  arrange(month)


bing_nlp <- bing_nlp %>% 
  rename(company = Company)
afinn_nlp <- afinn_nlp %>% 
  rename(company = Company)

review_comb <- full_join(rateRollAvg, bing_nlp, by = c('month', 'company'))
review_comb <- full_join(review_comb, afinn_nlp, by = c('month', 'company'))






```

```{r}
library(fintool)
#github: vlahadamis/fintool


tick <- c('SHEL', 'XOM', 'BP', 'CVX')

adj_price <- fintool::ezohlc(tick, '2016-02-01', Sys.Date())

retMon <- adj_price %>%
  mutate(month = (ceiling_date(date, unit = 'month') - days(1))) %>% 
  group_by(month, Symbol) %>% 
  summarise(
    openMon = first(Open),
    closeMon = last(Close)) %>% 
  mutate(retMon = log(closeMon/openMon)) %>% 
  mutate(company = case_when(Symbol == "BP" ~ "bp",
                             Symbol == "CVX" ~ "Chevron",
                             Symbol == "SHEL" ~ "Shell",
                             Symbol == "XOM" ~ "ExxonMobil"))

# for binding to signal df; hypothesis is that indicators predict returns one month ahead. Thus, for model testing sake we need to subtract one month from return df to bind to indicator df
retMon4bind <- retMon %>% 
  mutate(month = (month + days(1)) - months(1) - days(1))

review_comb <- full_join(review_comb, retMon4bind, by = c('month', 'company'))
```

```{r}
#reviews as a predictor of alpha in y
rev_y <- rbind(bp, chevron, exxon, shell) %>% 
  transmute(ratingValue, name, reviewBody, company = name1, date, i) %>%
  mutate(date = as.Date(date, format = "%b %d, %Y")) %>%
  drop_na() %>% 
  arrange(company, date) %>% 
  mutate(y = year(date),
         q = paste0("Q", quarter(date)," ", y),
         m = paste0("M", month(date)," ", y)) %>% 
  group_by(y, company) %>% 
  summarise(mean_value = mean(ratingValue), count = n()) 

affin_y <- affin_base %>% 
  group_by(company, y) %>% 
  summarise(sentiment = mean(value))

bing_y <- bing_base %>% 
  mutate(p_n = case_when(sentiment == 'positive' ~ 1,
                   sentiment == 'negative' ~ 0,
                   T ~ NA)) %>% 
  group_by(company, y) %>% 
  summarise(prop_postive = mean(p_n))
  
indicators_y <- full_join(rev_y, affin_y, by = c("company", "y"))
indicators_y <- full_join(bing_y, indicators_y, by = c("company", "y"))


alpha_y <- ret_join_beta %>% 
  filter(date >= '2014-12-31',
         date <= '2024-01-01') %>% 
  rename(Symbol = symbol) %>% 
  mutate(company = case_when(Symbol == "BP" ~ "bp",
                             Symbol == "CVX" ~ "Chevron",
                             Symbol == "SHEL" ~ "Shell",
                             Symbol == "XOM" ~ "ExxonMobil")) %>% 
  ungroup() %>% 
  select(-Symbol) %>% 
  group_by(y) %>% 
  filter(date == max(date)) %>% 
  ungroup()

alpha_y <- alpha_y %>% 
  group_by(company) %>% 
  mutate(returns = log(sp500_close/lag(sp500_close)),
         rf = ((rf + 1)^(252)) - 1) %>% 
  mutate(alpha = returns - rf - slope*sp500_ret + slope*rf) %>%
  mutate(y = y + 1)
  

comb_y <- full_join(alpha_y, indicators_y, by = c("company", "y")) %>% 
  transmute(y, company, alpha, prop_postive, mean_value, sentiment) %>% 
  drop_na()


model <- lm(alpha ~ prop_postive + mean_value + sentiment, data = comb_y)

summary(model)

tq_index("^GSPC", get = "stock.prices", from = "2020-01-01", to = "2024-01-01")

sp500_desc <- tidyquant::tq_index("SP500") 
  #%>% dplyr::filter(!stringr::str_detect(symbol,"BRK.B|BF.B"))

sp400_prices <- tidyquant::tq_get(sort(sp400_desc$symbol),
                                  #sort(grep(sp400_desc$symbol,pattern = "BRK.B|BF.B|DD", value = TRUE, invert = TRUE)),
                                  get  = "stock.prices",
                                  from = "2011-01-01",
                                  to = Sys.Date())

```

```{r}

review_comb_bp <- review_comb %>% 
  filter(company == 'bp')

model <- lm(retMon ~ month + xOver + percent_positive + sentiment, data = r)

summary(model)

review_comb_exxon <- review_comb %>% 
  filter(company == 'ExxonMobil')

model <- lm(retMon ~ month + rollAvg3 + rollAvg12 + xOver + percent_positive + sentiment, data = review_comb_exxon)

summary(model)

```
